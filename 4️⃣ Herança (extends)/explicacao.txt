üîπO que √© Heran√ßa?

Heran√ßa √© um mecanismo da POO que permite uma classe (filha ou subclasse) 
herdar atributos e m√©todos de outra classe (pai ou superclasse).

Isso evita repeti√ß√£o de c√≥digo e permite reutiliza√ß√£o.

Em Java, usamos a palavra-chave extends.
------------------------------------------------------------------------------------------------

üîπExemplo de Heran√ßa em Java
// Classe base (superclasse ou classe pai)
class Animal {
    // Atributos comuns a todos os animais
    protected String nome;
    protected int idade;

    // Construtor da classe Animal
    public Animal(String nome, int idade) {
        this.nome = nome;
        this.idade = idade;
    }

    // M√©todo comum a todos os animais
    public void emitirSom() {
        System.out.println("O animal faz um som...");
    }

    // M√©todo para mostrar informa√ß√µes
    public void mostrarInfo() {
        System.out.println("Nome: " + nome + ", Idade: " + idade);
    }
}

// Classe Cachorro que herda de Animal
class Cachorro extends Animal {
    private String raca;

    // Construtor de Cachorro (usa o construtor de Animal com super)
    public Cachorro(String nome, int idade, String raca) {
        super(nome, idade); // chama o construtor da classe pai
        this.raca = raca;
    }

    // Sobrescrevendo o m√©todo emitirSom
    @Override
    public void emitirSom() {
        System.out.println("O cachorro late: Au Au!");
    }

    // Novo m√©todo exclusivo da classe Cachorro
    public void brincar() {
        System.out.println(nome + " est√° brincando!");
    }
}

// Classe Gato que herda de Animal
class Gato extends Animal {
    private String cor;

    // Construtor de Gato
    public Gato(String nome, int idade, String cor) {
        super(nome, idade); // chama o construtor da classe pai
        this.cor = cor;
    }

    // Sobrescrevendo o m√©todo emitirSom
    @Override
    public void emitirSom() {
        System.out.println("O gato mia: Miau!");
    }

    // Novo m√©todo exclusivo da classe Gato
    public void arranhar() {
        System.out.println(nome + " est√° arranhando o sof√°!");
    }
}

// Classe principal para testar
public class Main {
    public static void main(String[] args) {
        // Criando um cachorro
        Cachorro c = new Cachorro("Rex", 5, "Labrador");
        c.mostrarInfo(); // herdado de Animal
        c.emitirSom();   // sobrescrito em Cachorro
        c.brincar();     // m√©todo exclusivo de Cachorro

        System.out.println();

        // Criando um gato
        Gato g = new Gato("Mimi", 3, "Branco");
        g.mostrarInfo(); // herdado de Animal
        g.emitirSom();   // sobrescrito em Gato
        g.arranhar();    // m√©todo exclusivo de Gato
    }
}
------------------------------------------------------------------------------------------------

üîπExplica√ß√£o
..
Classe Animal

Tem atributos nome e idade, al√©m de m√©todos comuns como emitirSom() e mostrarInfo().

√â a superclasse.

Classe Cachorro

Usa extends Animal ‚Üí herdou atributos e m√©todos.

Criamos um novo atributo raca.

Usamos super(nome, idade) para chamar o construtor da classe pai.

Sobrescrevemos emitirSom() para que o cachorro lata.

Adicionamos um m√©todo exclusivo brincar().

Classe Gato

Herdou de Animal.

Criamos um novo atributo cor.

Sobrescrevemos emitirSom() para que o gato mia.

Adicionamos um m√©todo exclusivo arranhar().
------------------------------------------------------------------------------------------------

üîπEm resumo:

Heran√ßa ‚Üí permite que classes compartilhem c√≥digo.

Sobrescrita (@Override) ‚Üí permite mudar o comportamento herdado.

super ‚Üí chama m√©todos/atributos da classe pai.