ðŸ”¹ O QUE E POLIMORFISMO?
-----------------------------------------------------------------------------------------------

A palavara polimorfismo vem do grego e siginifica "muitas formas".
Em POO, o polimorfismo permite que um mesmo mÃ©todo ou uma mesma referÃªncia se comporte 
de formas diferentes dependendo do objeeto que utilza.

ou seja:
VocÃª pode usar uma mesma "interface" (forma externa),
mas ter diferentes "implementaÃ§Ãµes" (formas internas).
-----------------------------------------------------------------------------------------------

ðŸ”¹ TIPOS DE POLIMORFISMO EM java
-----------------------------------------------------------------------------------------------

1. polimorfismo de sobrecarga (OverLoading)
ðŸ”¹ quanto temos varios metodos com o mesmo nome,
   mas assinaturas diferentes(parametros diferentes).
ðŸ”¹ Decidido em tempo de compilaÃ§Ã£o (compile-time).
-----------------------------------------------------------------------------------------------

2. polimorfismo de sobreposicao(OverRinding)
ðŸ”¹quando uma subclasse redefine um metodo ja existente na superclasse.
ðŸ”¹decidido em tempo de excucao (runtime)
ðŸ”¹aqui e onde o polimorfismo brilha de verdade
-----------------------------------------------------------------------------------------------

ðŸ”¹Exemplo: Polimorfismo por Sobrecarga (Overloading)
// Classe com mÃ©todos de mesmo nome, mas assinaturas diferentes
class Calculadora {
    
    // MÃ©todo soma com 2 inteiros
    public int soma(int a, int b) {
        return a + b;
    }

    // MÃ©todo soma com 3 inteiros
    public int soma(int a, int b, int c) {
        return a + b + c;
    }

    // MÃ©todo soma com 2 nÃºmeros decimais (double)
    public double soma(double a, double b) {
        return a + b;
    }
}

public class Main {
    public static void main(String[] args) {
        // Criando um objeto da classe Calculadora
        Calculadora calc = new Calculadora();

        // O compilador escolhe automaticamente qual mÃ©todo chamar
        // com base nos parÃ¢metros passados

        System.out.println(calc.soma(2, 3));        // Chama soma(int, int)
        System.out.println(calc.soma(2, 3, 4));     // Chama soma(int, int, int)
        System.out.println(calc.soma(2.5, 3.7));    // Chama soma(double, double)
    }
}
-----------------------------------------------------------------------------------------------

ðŸ”¹Exemplo: Polimorfismo por SobreposiÃ§Ã£o (Overriding)
// Classe base (superclasse)
class Animal {
    // MÃ©todo genÃ©rico para emitir som
    public void emitirSom() {
        System.out.println("O animal faz um som...");
    }
}

// Subclasse Cachorro herdando de Animal
class Cachorro extends Animal {
    // Sobrescrevendo (reescrevendo) o mÃ©todo da superclasse
    @Override
    public void emitirSom() {
        System.out.println("O cachorro late: Au Au!");
    }
}

// Subclasse Gato herdando de Animal
class Gato extends Animal {
    // Sobrescrevendo o mesmo mÃ©todo da superclasse
    @Override
    public void emitirSom() {
        System.out.println("O gato mia: Miau!");
    }
}

public class Main {
    public static void main(String[] args) {
        // Criando referÃªncias do tipo Animal,
        // mas apontando para objetos diferentes
        Animal a1 = new Cachorro(); // ReferÃªncia Animal, objeto Cachorro
        Animal a2 = new Gato();     // ReferÃªncia Animal, objeto Gato

        // O mÃ©todo chamado depende do OBJETO real
        a1.emitirSom(); // SaÃ­da: "O cachorro late: Au Au!"
        a2.emitirSom(); // SaÃ­da: "O gato mia: Miau!"
    }
}
-----------------------------------------------------------------------------------------------

resumindo
ðŸ”¹Overloading (Sobrecarga): mÃ©todos com mesmo nome, mas
  diferentes parÃ¢metros â†’ decidido na compilaÃ§Ã£o.
ðŸ”¹Overriding (SobreposiÃ§Ã£o): subclasses redefinem mÃ©todos â†’ decidido na execuÃ§Ã£o.
-----------------------------------------------------------------------------------------------
