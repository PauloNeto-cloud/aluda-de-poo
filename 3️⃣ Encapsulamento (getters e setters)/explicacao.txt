ğŸ”¹ O que Ã© Encapsulamento?

 Encapsulamento Ã© um princÃ­pio da POO que significa proteger os dados de uma classe, permitindo o acesso a eles apenas atravÃ©s de mÃ©todos controlados.

Ou seja:

Os atributos de uma classe normalmente ficam private 
(privados, sÃ³ acessados dentro da prÃ³pria classe).

O acesso a esses atributos Ã© feito com getters 
(para ler valores) e setters (para alterar valores).

Isso evita que o cÃ³digo externo modifique os atributos 
diretamente e ajuda a manter a seguranÃ§a e consistÃªncia dos dados.
------------------------------------------------------------------------------------------------

ğŸ”¹ Estrutura bÃ¡sica

Getter â†’ retorna o valor de um atributo.

Setter â†’ altera o valor de um atributo, mas pode incluir regras de validaÃ§Ã£o.
------------------------------------------------------------------------------------------------


ğŸ”¹Exemplo: Pessoa com encapsulamento
class Pessoa {
    //  Atributos privados (nÃ£o podem ser acessados diretamente fora da classe)
    private String nome;
    private int idade;

    // Construtor
    public Pessoa(String nome, int idade) {
        this.nome = nome;
        this.idade = idade;
    }

    // Getter para o nome (pegar o valor)
    public String getNome() {
        return nome;
    }

    // Setter para o nome (alterar o valor)
    public void setNome(String nome) {
        this.nome = nome;
    }

    // Getter para a idade
    public int getIdade() {
        return idade;
    }

    // Setter para a idade (com regra de validaÃ§Ã£o)
    public void setIdade(int idade) {
        if (idade >= 0) { // nÃ£o permite idade negativa
            this.idade = idade;
        } else {
            System.out.println("Idade invÃ¡lida!");
        }
    }

    // MÃ©todo comum
    public void apresentar() {
        System.out.println("OlÃ¡, meu nome Ã© " + nome + " e tenho " + idade + " anos.");
    }
}

public class Main {
    public static void main(String[] args) {
        // Criando um objeto
        Pessoa p1 = new Pessoa("JoÃ£o", 20);

        // Acessando atributos de forma controlada
        System.out.println("Nome inicial: " + p1.getNome()); // usando getter
        System.out.println("Idade inicial: " + p1.getIdade());

        // Alterando valores com setter
        p1.setNome("Maria");
        p1.setIdade(25);

        p1.apresentar(); // "OlÃ¡, meu nome Ã© Maria e tenho 25 anos."

        // Tentando colocar idade invÃ¡lida
        p1.setIdade(-5); // "Idade invÃ¡lida!"
    }
}
------------------------------------------------------------------------------------------------

ğŸ”¹ExplicaÃ§Ã£o

private String nome; â†’ atributos privados.

getNome() â†’ permite ler o valor do atributo.

setNome(String nome) â†’ permite alterar o valor, de forma controlada.

setIdade(int idade) â†’ adicionamos validaÃ§Ã£o para evitar idade negativa.

O cÃ³digo externo sÃ³ consegue acessar os atributos por esses mÃ©todos, nunca diretamente.
------------------------------------------------------------------------------------------------

ğŸ”¹Analogia da Vida Real

Pense numa conta bancÃ¡ria ğŸ’°:

O saldo Ã© um atributo privado.

VocÃª nÃ£o pode simplesmente abrir o sistema e digitar saldo = -1000.

VocÃª precisa usar mÃ©todos controlados como depositar() ou sacar().

Isso garante que as regras do banco sejam respeitadas.
------------------------------------------------------------------------------------------------

ğŸ”¹Resumindo

Encapsulamento â†’ proteger atributos, expondo apenas mÃ©todos controlados.

Getters â†’ ler valores.

Setters â†’ alterar valores (com regras se necessÃ¡rio).

Deixa o sistema seguro, organizado e fÃ¡cil de manter.