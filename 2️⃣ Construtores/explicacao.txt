üîπ O que √© um Construtor?

 Um construtor √© um m√©todo especial dentro da classe que √© chamado automaticamente quando um objeto √© criado com o new.

Ele serve para:

Inicializar atributos de um objeto.

Garantir que o objeto comece seu "ciclo de vida" j√° configurado.
------------------------------------------------------------------------------------------------

üîπRegras importantes sobre construtores em Java:

1. O construtor tem o mesmo nome da classe.

2. Ele n√£o tem tipo de retorno (nem void).

3. Se voc√™ n√£o criar nenhum, o Java cria um construtor padr√£o vazio automaticamente.
------------------------------------------------------------------------------------------------

üîπExemplo 1: Construtor Padr√£o (sem par√¢metros)
class Pessoa {
    String nome;
    int idade;

    // Construtor padr√£o
    public Pessoa() {
        nome = "Desconhecido"; // valor inicial
        idade = 0;             // valor inicial
    }

    public void apresentar() {
        System.out.println("Ol√°, meu nome √© " + nome + " e tenho " + idade + " anos.");
    }
}

public class Main {
    public static void main(String[] args) {
        // Criando objeto usando o construtor padr√£o
        Pessoa p1 = new Pessoa();

        p1.apresentar(); // "Ol√°, meu nome √© Desconhecido e tenho 0 anos."
    }
}


Aqui n√£o passamos nada, mas mesmo assim o 
objeto foi inicializado com valores padr√£o definidos no construtor.
------------------------------------------------------------------------------------------------

üîπExemplo 2: Construtor com Par√¢metros
class Pessoa {
    String nome;
    int idade;

    // Construtor com par√¢metros
    public Pessoa(String n, int i) {
        nome = n;
        idade = i;
    }

    public void apresentar() {
        System.out.println("Ol√°, meu nome √© " + nome + " e tenho " + idade + " anos.");
    }
}

public class Main {
    public static void main(String[] args) {
        // Criando objetos com valores passados no construtor
        Pessoa p1 = new Pessoa("Jo√£o", 20);
        Pessoa p2 = new Pessoa("Maria", 25);

        p1.apresentar(); // "Ol√°, meu nome √© Jo√£o e tenho 20 anos."
        p2.apresentar(); // "Ol√°, meu nome √© Maria e tenho 25 anos."
    }
}


 Aqui usamos o construtor para j√° criar o objeto com valores espec√≠ficos.

 -----------------------------------------------------------------------------------------------
üîπExemplo 3: Sobrecarga de Construtores
 Assim como m√©todos, construtores tamb√©m 
podem ser sobrecargados (mesmo nome, mas diferentes par√¢metros).

class Pessoa {
    String nome;
    int idade;

    // Construtor sem par√¢metros
    public Pessoa() {
        nome = "Desconhecido";
        idade = 0;
    }

    // Construtor com par√¢metros
    public Pessoa(String n, int i) {
        nome = n;
        idade = i;
    }

    public void apresentar() {
        System.out.println("Ol√°, meu nome √© " + nome + " e tenho " + idade + " anos.");
    }
}

public class Main {
    public static void main(String[] args) {
        Pessoa p1 = new Pessoa(); // usa construtor sem par√¢metros
        Pessoa p2 = new Pessoa("Carlos", 30); // usa construtor com par√¢metros

        p1.apresentar(); // "Ol√°, meu nome √© Desconhecido e tenho 0 anos."
        p2.apresentar(); // "Ol√°, meu nome √© Carlos e tenho 30 anos."
    }
}
------------------------------------------------------------------------------------------------

üîπResumindo:

Construtor ‚Üí m√©todo especial chamado quando o objeto √© criado.

Padr√£o ‚Üí criado automaticamente pelo Java se voc√™ n√£o definir nenhum.

Com par√¢metros ‚Üí voc√™ define valores iniciais ao criar o objeto.

Sobrecarga ‚Üí voc√™ pode ter v√°rios construtores diferentes na mesma classe.Resumindo:
